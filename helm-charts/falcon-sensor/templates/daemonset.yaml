{{- if .Values.node.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "falcon-sensor.fullname" . }}
  labels:
    app: "{{ include "falcon-sensor.name" . }}"
    app.kubernetes.io/name: {{ include "falcon-sensor.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: "kernel_sensor"
    crowdstrike.com/provider: crowdstrike
    helm.sh/chart: {{ include "falcon-sensor.chart" . }}
    {{- if .Values.node.daemonset.labels }}
    {{- range $key, $value := .Values.node.daemonset.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}
  {{- if .Values.node.daemonset.annotations }}
  annotations:
    {{- range $key, $value := .Values.node.daemonset.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "falcon-sensor.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: "kernel_sensor"
      crowdstrike.com/provider: crowdstrike
  updateStrategy:
    type: {{ .Values.node.daemonset.updateStrategy }}
  template:
    metadata:
      annotations:
        sensor.falcon-system.crowdstrike.com/injection: disabled
        {{- range $key, $value := .Values.node.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      labels:
        app: "{{ include "falcon-sensor.name" . }}"
        app.kubernetes.io/name: {{ include "falcon-sensor.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/component: "kernel_sensor"
        crowdstrike.com/provider: crowdstrike
        helm.sh/chart: {{ include "falcon-sensor.chart" . }}
        {{- if .Values.node.daemonset.labels }}
        {{- range $key, $value := .Values.node.daemonset.labels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
    spec:
    {{- with .Values.node.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      tolerations:
      # this toleration is to have the daemonset runnable on all nodes
      - operator: Exists
        effect: NoExecute
      - operator: Exists
        effect: NoSchedule
      {{- with .Values.node.daemonset.tolerations }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - name: falcon-node-sensor
        image: "{{ .Values.node.image.repository }}:{{ .Values.node.image.tag }}"
        imagePullPolicy: "{{ .Values.node.image.pullPolicy }}"
        volumeMounts:
        - name: dev
          mountPath: /dev
        - name: var-run
          mountPath: /var/run
        - name: etc
          mountPath: /etc
        - name: var-log
          mountPath: /var/log
        - name: crowdstrike-dir
          mountPath: /opt/CrowdStrike
        # Various pod security context settings. Bear in mind that many of these have an impact
        # on the Falcon Sensor working correctly.
        #
        # - User that the container will execute as. Typically necessary to run as root (0).
        # - Runs the Falcon Sensor containers as privileged containers. This is required when
        #   running the Falcon Linux Sensor on Kubernetes nodes to properly run in the node's
        #   kernel and to actually protect the node.
        securityContext:
          runAsUser: 0
          privileged: true
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: true
        envFrom:
        - configMapRef:
            name: {{ include "falcon-sensor.fullname" . }}-config
      volumes:
        - name: dev
          hostPath:
            path: /dev
        - name: etc
          hostPath:
            path: /etc
        - name: var-run
          hostPath:
            path: /var/run
        - name: var-log
          emptyDir: {}
        - name: crowdstrike-dir
          hostPath:
            path: /opt/CrowdStrike
      serviceAccountName: crowdstrike-falcon-sa
      terminationGracePeriodSeconds: {{ .Values.node.terminationGracePeriod }}
      hostNetwork: true
      hostPID: true
      hostIPC: true
{{- end }}
